const express = require('express');
const OpenAI = require('openai');
const mysql = require('mysql2/promise');

const app = express();
app.use(express.json());

// Configura√ß√µes das APIs - m√∫ltiplas chaves
const API_KEYS = [
  process.env.GITHUB_TOKEN_1,
  process.env.GITHUB_TOKEN_2,
  process.env.GITHUB_TOKEN_3,
  process.env.GITHUB_TOKEN_4,
].filter(Boolean);

const endpoint = "https://models.github.ai/inference";
const model = "openai/gpt-4.1";

// Sistema de rotacionamento de APIs
let currentApiIndex = 0;
let rateLimitStats = {};

// String de conex√£o direta do Railway
const MYSQL_CONNECTION_STRING = "mysql://root:ZefFlJwoGgbGclwcSyOeZuvMGVqmhvtH@trolley.proxy.rlwy.net:52398/railway";

// Parse da string de conex√£o
function parseMySQLString(connectionString) {
  try {
    const matches = connectionString.match(/mysql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/(.+)/);
    if (matches) {
      return {
        host: matches[3],
        port: parseInt(matches[4]),
        user: matches[1],
        password: matches[2],
        database: matches[5],
        connectTimeout: 10000,
        acquireTimeout: 10000,
        timeout: 10000,
        charset: 'utf8mb4'
      };
    }
  } catch (error) {
    console.error('‚ùå Erro ao parsear string MySQL:', error);
  }
  return null;
}

// Configura√ß√µes do MySQL
const dbConfig = parseMySQLString(MYSQL_CONNECTION_STRING) || {
  host: process.env.MYSQLHOST,
  port: process.env.MYSQLPORT || 3306,
  user: process.env.MYSQLUSER,
  password: process.env.MYSQLPASSWORD,
  database: process.env.MYSQLDATABASE,
  connectTimeout: 10000,
  acquireTimeout: 10000,
  timeout: 10000,
  charset: 'utf8mb4'
};

// Verifica se h√° pelo menos uma chave API dispon√≠vel
if (API_KEYS.length === 0) {
  console.error("ERRO: Nenhuma GITHUB_TOKEN encontrada nas vari√°veis de ambiente");
  process.exit(1);
}

console.log(`üîë ${API_KEYS.length} chaves API configuradas`);

// Fun√ß√£o para obter data e hora formatadas
function getCurrentDateTime() {
  const now = new Date();

  now.setTime(now.getTime() - 3 * 60 * 60 * 1000);
  
  // Formato para o Brasil (DD/MM/AAAA HH:MM:SS)
  const day = String(now.getDate()).padStart(2, '0');
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const year = now.getFullYear();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  
  return {
    date: `${day}/${month}/${year}`,
    time: `${hours}:${minutes}:${seconds}`,
    full: `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`,
    weekday: now.toLocaleDateString('pt-BR', { weekday: 'long' }),
    timestamp: now.getTime()
  };
}

// Fun√ß√£o para gerar ID do pedido
function generateOrderId() {
  const timestamp = Date.now().toString().slice(-6);
  const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  return `MS${timestamp}${random}`;
}

// Fun√ß√£o para obter o cliente atual
function getCurrentClient() {
  const token = API_KEYS[currentApiIndex];
  return new OpenAI({
    baseURL: endpoint,
    apiKey: token
  });
}

// Fun√ß√£o para rotacionar para a pr√≥xima API
function rotateToNextApi() {
  const oldIndex = currentApiIndex;
  currentApiIndex = (currentApiIndex + 1) % API_KEYS.length;
  
  if (!rateLimitStats[oldIndex]) {
    rateLimitStats[oldIndex] = { rateLimitedAt: new Date() };
  } else {
    rateLimitStats[oldIndex].rateLimitedAt = new Date();
  }
  
  console.log(`üîÑ Rotacionando API: ${oldIndex} ‚Üí ${currentApiIndex}`);
  return getCurrentClient();
}

// Fun√ß√£o para fazer chamada √† API com tratamento de rate limit
async function callAIWithFallback(messages, maxRetries = API_KEYS.length) {
  let lastError;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const client = getCurrentClient();
    const currentTokenIndex = currentApiIndex;
    
    try {
      console.log(`ü§ñ Tentando API ${currentTokenIndex} (tentativa ${attempt + 1}/${maxRetries})`);
      
      const response = await client.chat.completions.create({
        messages: messages,
        temperature: 0.3,
        top_p: 1.0,
        model: model
      });
      
      console.log(`‚úÖ Sucesso com API ${currentTokenIndex}`);
      return response;
      
    } catch (error) {
      lastError = error;
      
      if (error.code === 'RateLimitReached' || error.message?.includes('Rate limit')) {
        console.log(`‚è∞ Rate limit na API ${currentTokenIndex}: ${error.message}`);
        rotateToNextApi();
        
        if (attempt < maxRetries - 1) {
          console.log(`üîÑ Tentando pr√≥xima API...`);
          continue;
        }
      } else {
        console.error(`‚ùå Erro na API ${currentTokenIndex}:`, error.message);
        
        if (attempt < maxRetries - 1) {
          console.log(`üîÑ Tentando pr√≥xima API devido a erro...`);
          rotateToNextApi();
          continue;
        }
      }
    }
  }
  
  throw lastError || new Error('Todas as APIs falharam');
}

// Pool de conex√µes MySQL
let pool;
let mysqlEnabled = false;

// Fun√ß√£o para testar conex√£o MySQL
async function testMySQLConnection() {
  console.log('üîå Testando conex√£o MySQL...');
  
  try {
    const testConnection = await mysql.createConnection(dbConfig);
    await testConnection.execute('SELECT 1 as test');
    console.log('‚úÖ Teste de conex√£o MySQL: OK');
    await testConnection.end();
    return true;
  } catch (error) {
    console.error('‚ùå Teste de conex√£o MySQL falhou:', error.message);
    return false;
  }
}

// Fun√ß√£o para manter o MySQL ativo
async function keepMySQLAlive() {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel para keep-alive');
    return false;
  }

  try {
    const [rows] = await pool.execute('SELECT 1 as keep_alive');
    console.log('‚úÖ Keep-alive MySQL executado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no keep-alive MySQL:', error.message);
    
    // Tentar reconectar se houver erro
    try {
      console.log('üîÑ Tentando reconectar ao MySQL...');
      await initializeDatabase();
    } catch (reconnectError) {
      console.error('‚ùå Falha na reconex√£o MySQL:', reconnectError.message);
    }
    
    return false;
  }
}

// Fun√ß√£o para buscar produtos de pronta entrega
async function getProntaEntregaProducts() {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, usando produtos padr√£o');
    return null;
  }

  try {
    const [rows] = await pool.execute(
      `SELECT nome, descricao, preco, estoque FROM produtos_pronta_entrega WHERE disponibilidade = 'Pronta Entrega' AND estoque > 0`
    );

    if (rows.length === 0) {
      return "Nenhum produto dispon√≠vel para pronta entrega no momento.";
    }

    let productsString = "üì¶ PRODUTOS DISPON√çVEIS ‚Äì PRONTA ENTREGA\n\n";
    rows.forEach(product => {
      productsString += `üéÇ ${product.nome}\n`;
      productsString += `‚Ä¢ Descri√ß√£o: ${product.descricao}\n`;
      productsString += `‚Ä¢ Pre√ßo: R$ ${product.preco} cada\n`;
      productsString += `‚Ä¢ Estoque: ${product.estoque} unidades\n`;
      productsString += `‚Ä¢ Disponibilidade: ‚úÖ Pronta Entrega\n\n`;
    });

    return productsString;
  } catch (error) {
    console.error('‚ùå Erro ao buscar produtos de pronta entrega:', error.message);
    return null;
  }
}

// Fun√ß√£o para extrair produtos do texto
function extrairProdutosDoTexto(textoProdutos) {
  const produtos = [];
  const linhas = textoProdutos.split('\n').filter(linha => linha.trim());
  
  for (const linha of linhas) {
    // Padr√µes comuns: "2x Brownie Ferrero", "1x Dindin Oreo R$ 5,50", etc.
    const matchQuantidade = linha.match(/(\d+)x\s+([^]+?)(?:\s*R\$\s*([\d,]+))?/i);
    
    if (matchQuantidade) {
      const quantidade = parseInt(matchQuantidade[1]);
      const nome = matchQuantidade[2].trim();
      const precoUnitario = matchQuantidade[3] ? parseFloat(matchQuantidade[3].replace(',', '.')) : 0;
      
      produtos.push({
        nome: nome,
        quantidade: quantidade,
        preco_unitario: precoUnitario,
        subtotal: precoUnitario * quantidade
      });
    } else {
      // Tentar outros padr√µes
      const matchSemQuantidade = linha.match(/^[^-]*?([^]+?)\s*R\$\s*([\d,]+)/i);
      if (matchSemQuantidade) {
        produtos.push({
          nome: matchSemQuantidade[1].trim(),
          quantidade: 1,
          preco_unitario: parseFloat(matchSemQuantidade[2].replace(',', '.')),
          subtotal: parseFloat(matchSemQuantidade[2].replace(',', '.'))
        });
      }
    }
  }
  
  return produtos;
}

// Fun√ß√£o para processar pedido - VERS√ÉO MELHORADA
async function processarPedido(aiResponse, sessionId, senderName, groupName, isMessageFromGroup) {
  try {
    // Padr√µes para detectar pedido confirmado - mais flex√≠vel
    const padraoPedido = /‚úÖ PEDIDO CONFIRMADO|PEDIDO CONFIRMADO|pedido confirmado|‚úÖ Pedido Confirmado/i;
    
    if (!padraoPedido.test(aiResponse)) {
      return null; // N√£o √© um pedido confirmado
    }

    console.log('üõí Detectando pedido na resposta da IA...');

    // Extrair ID do pedido
    const idMatch = aiResponse.match(/#MS(\w+)|ID.*?(\w+)$/mi);
    const pedidoId = idMatch ? (idMatch[1] || idMatch[2] || generateOrderId()) : generateOrderId();

    // Tentar extrair informa√ß√µes espec√≠ficas
    let produtosTexto = '';
    let valorTotal = 0;
    let formaPagamento = 'PIX';
    let formaEntrega = 'Retirada Local';
    let observacoes = '';

    // Extrair produtos - m√©todo mais flex√≠vel
    const produtosSection = aiResponse.split('Produtos:')[1];
    if (produtosSection) {
      const endSection = produtosSection.split('Valor total')[0] || produtosSection.split('Forma de pagamento')[0] || produtosSection;
      produtosTexto = endSection.trim();
    }

    // Extrair valor total
    const valorMatch = aiResponse.match(/Valor total:\s*R\$\s*([\d,\.]+)/i) || 
                      aiResponse.match(/Total:\s*R\$\s*([\d,\.]+)/i);
    if (valorMatch) {
      valorTotal = parseFloat(valorMatch[1].replace('.', '').replace(',', '.'));
    }

    // Extrair forma de pagamento
    const pagamentoMatch = aiResponse.match(/Forma de pagamento:\s*([^\n]+)/i) || 
                          aiResponse.match(/Pagamento:\s*([^\n]+)/i);
    if (pagamentoMatch) {
      formaPagamento = pagamentoMatch[1].trim();
    }

    // Extrair forma de entrega
    const entregaMatch = aiResponse.match(/Entrega:\s*([^\n]+)/i);
    if (entregaMatch) {
      formaEntrega = entregaMatch[1].trim();
    }

    // Extrair observa√ß√µes
    const obsMatch = aiResponse.match(/Observa√ß√µes:\s*([^]*?)(?=$|\n\n)/i);
    if (obsMatch) {
      observacoes = obsMatch[1].trim();
    }

    // Processar produtos individuais
    const produtos = produtosTexto ? extrairProdutosDoTexto(produtosTexto) : [];

    // Se n√£o conseguiu extrair produtos, criar um registro b√°sico
    if (produtos.length === 0) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel extrair produtos espec√≠ficos, criando registro b√°sico do pedido');
      produtos.push({
        nome: 'Pedido confirmado (detalhes na mensagem completa)',
        quantidade: 1,
        preco_unitario: valorTotal > 0 ? valorTotal : 0,
        subtotal: valorTotal > 0 ? valorTotal : 0
      });
    }

    // Calcular valor total se n√£o foi extra√≠do
    if (valorTotal === 0 && produtos.length > 0) {
      valorTotal = produtos.reduce((total, produto) => total + produto.subtotal, 0);
    }

    const pedidoData = {
      session_id: sessionId,
      sender_name: senderName,
      group_name: groupName || '',
      is_group_message: isMessageFromGroup ? 1 : 0,
      produtos_json: JSON.stringify(produtos),
      valor_total: valorTotal,
      forma_pagamento: formaPagamento,
      forma_entrega: formaEntrega,
      observacoes: observacoes,
      status: 'confirmado',
      resposta_completa: aiResponse, // Armazena a mensagem completa
      pedido_id: pedidoId // Armazena o ID do pedido
    };

    console.log(`üõí Pedido processado: ${produtos.length} produtos, R$ ${valorTotal}, ID: ${pedidoId}`);
    return pedidoData;

  } catch (error) {
    console.error('‚ùå Erro ao processar pedido:', error);
    return null;
  }
}

// Fun√ß√£o para salvar pedido no banco - VERS√ÉO ATUALIZADA
async function salvarPedido(pedidoData) {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, pulando salvamento do pedido');
    return null;
  }

  try {
    console.log(`üíæ Salvando pedido no banco...`);
    
    const [result] = await pool.execute(
      `INSERT INTO pedidos 
       (session_id, sender_name, group_name, is_group_message, produtos_json, valor_total, 
        forma_pagamento, forma_entrega, observacoes, status, resposta_completa, pedido_id) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        pedidoData.session_id,
        pedidoData.sender_name,
        pedidoData.group_name,
        pedidoData.is_group_message,
        pedidoData.produtos_json,
        pedidoData.valor_total,
        pedidoData.forma_pagamento,
        pedidoData.forma_entrega,
        pedidoData.observacoes,
        pedidoData.status,
        pedidoData.resposta_completa,
        pedidoData.pedido_id
      ]
    );
    
    const pedidoId = result.insertId;
    console.log(`‚úÖ Pedido salvo - ID: ${pedidoId}, C√≥digo: ${pedidoData.pedido_id}`);
    
    // Atualizar estoque dos produtos apenas se conseguiu extrair produtos espec√≠ficos
    try {
      const produtos = JSON.parse(pedidoData.produtos_json);
      if (produtos.length > 0 && produtos[0].nome !== 'Pedido confirmado (detalhes na mensagem completa)') {
        await atualizarEstoquePedido(produtos);
      }
    } catch (estoqueError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel atualizar estoque, mas o pedido foi salvo');
    }
    
    return { id: pedidoId, codigo: pedidoData.pedido_id };
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar pedido:', error.message);
    return null;
  }
}

// Fun√ß√£o para atualizar estoque
async function atualizarEstoquePedido(produtos) {
  try {
    for (const produto of produtos) {
      // Buscar produto no banco pelo nome (aproximado)
      const [rows] = await pool.execute(
        `SELECT id, estoque FROM produtos_pronta_entrega 
         WHERE nome LIKE ? AND estoque > 0`,
        [`%${produto.nome}%`]
      );
      
      if (rows.length > 0) {
        const produtoDb = rows[0];
        const novoEstoque = produtoDb.estoque - produto.quantidade;
        
        await pool.execute(
          `UPDATE produtos_pronta_entrega SET estoque = ? WHERE id = ?`,
          [Math.max(0, novoEstoque), produtoDb.id]
        );
        
        console.log(`üì¶ Estoque atualizado: ${produto.nome} - ${produtoDb.estoque} ‚Üí ${novoEstoque}`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erro ao atualizar estoque:', error.message);
  }
}

// Fun√ß√£o para enviar notifica√ß√£o de novo pedido
async function enviarNotificacaoPedido(pedidoInfo, pedidoData) {
  try {
    const produtos = JSON.parse(pedidoData.produtos_json);
    const mensagemNotificacao = `
üÜï NOVO PEDIDO #${pedidoInfo.codigo}
üë§ Cliente: ${pedidoData.sender_name}
üì¶ ${produtos.length} itens
üí∞ Total: R$ ${pedidoData.valor_total}
üí≥ Pagamento: ${pedidoData.forma_pagamento}
üöö Entrega: ${pedidoData.forma_entrega}
‚è∞ Hor√°rio: ${getCurrentDateTime().full}
üìù Status: ${pedidoData.status}
    `.trim();

    console.log('üîî Notifica√ß√£o de pedido:\n', mensagemNotificacao);
    console.log('üìÑ Mensagem completa armazenada no banco de dados');
    
  } catch (error) {
    console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
  }
}

async function initializeDatabase() {
  console.log('üîÑ Inicializando MySQL para Railway...');
  
  if (!dbConfig.host || !dbConfig.user || !dbConfig.password || !dbConfig.database) {
    console.log('üö´ Configura√ß√µes do MySQL incompletas');
    mysqlEnabled = false;
    return;
  }

  const connectionTest = await testMySQLConnection();
  if (!connectionTest) {
    console.log('üö´ MySQL desabilitado - n√£o foi poss√≠vel conectar');
    mysqlEnabled = false;
    return;
  }

  try {
    pool = mysql.createPool({
      ...dbConfig,
      waitForConnections: true,
      connectionLimit: 10,
      queueLimit: 0,
      acquireTimeout: 10000,
      timeout: 10000,
    });

    const connection = await pool.getConnection();
    console.log('‚úÖ Pool MySQL conectado com sucesso');
    
    // Cria a tabela conversations se n√£o existir
    console.log('üîÑ Verificando/Criando tabela conversations...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS conversations (
        id INT AUTO_INCREMENT PRIMARY KEY,
        session_id VARCHAR(255) NOT NULL,
        sender_name VARCHAR(255) NOT NULL,
        group_name VARCHAR(255),
        is_group_message BOOLEAN DEFAULT FALSE,
        sender_message TEXT NOT NULL,
        ai_response TEXT NOT NULL,
        message_datetime BIGINT,
        receive_message_app VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Cria a tabela produtos_pronta_entrega se n√£o existir
    console.log('üîÑ Verificando/Criando tabela produtos_pronta_entrega...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS produtos_pronta_entrega (
        id INT AUTO_INCREMENT PRIMARY KEY,
        nome VARCHAR(100) NOT NULL,
        descricao TEXT,
        preco DECIMAL(10,2) NOT NULL,
        estoque INT NOT NULL,
        disponibilidade ENUM('Pronta Entrega') DEFAULT 'Pronta Entrega'
      )
    `);
    
    // Cria a tabela pedidos se n√£o existir - VERS√ÉO ATUALIZADA
    console.log('üîÑ Verificando/Criando tabela pedidos...');
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS pedidos (
        id INT AUTO_INCREMENT PRIMARY KEY,
        pedido_id VARCHAR(50) NOT NULL,
        session_id VARCHAR(255) NOT NULL,
        sender_name VARCHAR(255) NOT NULL,
        group_name VARCHAR(255),
        is_group_message BOOLEAN DEFAULT FALSE,
        produtos_json JSON NOT NULL,
        valor_total DECIMAL(10,2) NOT NULL,
        forma_pagamento ENUM('PIX', 'Dinheiro') DEFAULT 'PIX',
        forma_entrega ENUM('Retirada Local', 'UberFlash') DEFAULT 'Retirada Local',
        status ENUM('confirmado', 'preparando', 'pronto', 'entregue', 'cancelado') DEFAULT 'confirmado',
        observacoes TEXT,
        resposta_completa TEXT NOT NULL,
        data_retirada DATETIME,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);
    
    console.log('‚úÖ Tabelas verificadas/criadas');
    
    // Testa a funcionalidade de produtos
    console.log('üîÑ Testando busca de produtos...');
    const produtosTeste = await getProntaEntregaProducts();
    console.log('‚úÖ Teste de produtos:', produtosTeste ? 'OK' : 'FALHOU');
    
    connection.release();
    mysqlEnabled = true;
    console.log('üéâ MySQL totalmente inicializado e funcionando!');
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o do MySQL:', error.message);
    mysqlEnabled = false;
    
    if (pool) {
      try {
        await pool.end();
        pool = null;
      } catch (e) {
        console.error('Erro ao fechar pool:', e.message);
      }
    }
  }
}

// Fun√ß√£o para gerar session_id
function generateSessionId(senderName, groupName, isMessageFromGroup) {
  if (isMessageFromGroup && groupName) {
    return `group_${groupName}_user_${senderName}`;
  }
  return `user_${senderName}`;
}

// Fun√ß√£o para salvar conversa no banco
async function saveConversation(conversationData) {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, pulando salvamento');
    return null;
  }

  try {
    const sessionId = generateSessionId(
      conversationData.senderName,
      conversationData.groupName,
      conversationData.isMessageFromGroup
    );

    console.log(`üíæ Salvando conversa para: ${sessionId}`);
    
    const [result] = await pool.execute(
      `INSERT INTO conversations 
       (session_id, sender_name, group_name, is_group_message, sender_message, ai_response, message_datetime, receive_message_app) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        sessionId,
        conversationData.senderName || '',
        conversationData.groupName || '',
        conversationData.isMessageFromGroup ? 1 : 0,
        conversationData.senderMessage || '',
        conversationData.aiResponse || '',
        conversationData.messageDateTime || Date.now(),
        conversationData.receiveMessageApp || 'unknown'
      ]
    );
    
    console.log(`‚úÖ Conversa salva - ID: ${result.insertId}`);
    return result.insertId;
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar conversa:', error.message);
    return null;
  }
}

// Fun√ß√£o para buscar hist√≥rico de conversas
async function getConversationHistory(senderName, groupName, isMessageFromGroup, limit = 6) {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, sem hist√≥rico');
    return [];
  }

  try {
    const sessionId = generateSessionId(senderName, groupName, isMessageFromGroup);
    
    console.log(`üìö Buscando hist√≥rico para sess√£o: ${sessionId}`);
    
    const safeLimit = parseInt(limit);
    const [rows] = await pool.execute(
      `SELECT sender_message, ai_response, created_at 
       FROM conversations 
       WHERE session_id = ? 
       ORDER BY created_at DESC 
       LIMIT ${safeLimit}`,
      [sessionId]
    );
    
    console.log(`‚úÖ Hist√≥rico carregado: ${rows.length} mensagens`);
    return rows.reverse();
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico:', error.message);
    return [];
  }
}

// Fun√ß√£o para limpar hist√≥rico antigo
async function cleanupOldMessages(senderName, groupName, isMessageFromGroup) {
  if (!mysqlEnabled || !pool) return;

  try {
    const sessionId = generateSessionId(senderName, groupName, isMessageFromGroup);
    
    const [recentIds] = await pool.execute(
      `SELECT id FROM conversations 
       WHERE session_id = ? 
       ORDER BY created_at DESC 
       LIMIT 15`,
      [sessionId]
    );
    
    if (recentIds.length > 0) {
      const keepIds = recentIds.map(row => row.id);
      const placeholders = keepIds.map(() => '?').join(',');
      
      await pool.execute(
        `DELETE FROM conversations 
         WHERE session_id = ? AND id NOT IN (${placeholders})`,
        [sessionId, ...keepIds]
      );
      
      console.log(`üßπ Mensagens antigas limpas para: ${sessionId}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao limpar mensagens antigas:', error.message);
  }
}

// Webhook principal
app.post('/webhook', async (req, res) => {
  try {
    const {
      senderMessage,
      senderName,
      groupName,
      isMessageFromGroup,
      messageDateTime,
      receiveMessageApp
    } = req.body;

    console.log(`üì© Mensagem de ${senderName}${groupName ? ` no grupo ${groupName}` : ''}: ${senderMessage}`);
    console.log(`üóÉÔ∏è  MySQL: ${mysqlEnabled ? 'HABILITADO' : 'DESABILITADO'}`);
    console.log(`üîë API atual: ${currentApiIndex}`);

    // Obt√©m data e hora atual
    const currentDateTime = getCurrentDateTime();
    console.log(`üìÖ Data/Hora atual: ${currentDateTime.full}`);

    // Busca produtos de pronta entrega do banco
    const prontaEntregaProducts = await getProntaEntregaProducts();

    // Busca hist√≥rico recente da conversa
    const history = await getConversationHistory(senderName, groupName, isMessageFromGroup, 6);
    
    // Prepara o contexto com hist√≥rico e produtos din√¢micos
    const messages = [
      {
        role: "system",
        content: `Voc√™ √© o atendente oficial e exclusivo da loja "Mercado dos Sabores". Seu nome √© Saborzinho.
Sua √∫nica fun√ß√£o √© vender os produtos da loja e registrar pedidos.
Voc√™ N√ÉO responde perguntas sobre outros assuntos.
Voc√™ N√ÉO conversa fora do contexto da loja.
Voc√™ N√ÉO fala sobre outros estabelecimentos.
Voc√™ em hip√≥tese alguma dever√° dar desconto em caso de insist√™ncia pedir para o cliente falar com atendimento humanizado.
Voc√™ SEMPRE mant√©m o foco total em vendas, produtos e pedidos.
Voc√™ dever√° mandar o atendimento humanizado sempre quando o cliente solicitar.
Voce SEMPRE devera mostrar se o produto escolhido pelo cliente tem dispon√≠vel em pronta entrega. 
Voce SEMPRE devera dizer quando tentarem comprar um produto que nao esta dispon√≠vel em pronta entrega, que o mesmo dever√° fazer uma encomenda.

üìÖ INFORMA√á√ÉO DE DATA E HORA ATUAL:
‚Ä¢ Data: ${currentDateTime.date}
‚Ä¢ Hora: ${currentDateTime.time}
‚Ä¢ Dia da semana: ${currentDateTime.weekday}
‚Ä¢ Timestamp: ${currentDateTime.timestamp}

üìç INFORMA√á√ïES DA LOJA:

‚Ä¢ Nome: Mercado dos Sabores
‚Ä¢ Atendimento humanizado: Sabrina - Celular: 85991665141
‚Ä¢ Endere√ßo: Rua Raimundo Lemos Dias, 68 ‚Äì Luciano Cavalcante, Fortaleza‚ÄìCE
‚Ä¢ Pagamento: PIX üí≥ ou Dinheiro üíµ
‚Ä¢ Pix Celular: (85) 9 91665141 - Banco Inter - Sabrina Angela 
‚Ä¢ encomenda: A loja tem 2 dias √∫teis para entregar a encomenda.
‚Ä¢ Retirada: Local ou UberFlash (custo do cliente)
‚Ä¢ Site: https://lojams.rf.gd
‚Ä¢ Tempo m√©dio de preparo: ‚è±Ô∏è 25 a 40 minutos

---

${prontaEntregaProducts}

---

üõçÔ∏è CAT√ÅLOGO COMPLETO

üéÇ BROWNIES (R$ 4,50 cada):
‚Ä¢ Brownie Ferrero ‚Äì Brigadeiro 50% cacau, creme de avel√£ e amendoim
‚Ä¢ Brownie Doce de Leite ‚Äì Recheio cremoso de doce de leite
‚Ä¢ Brownie Ninho ‚Äì Recheio cremoso de leite Ninho
‚Ä¢ Brownie Pa√ßoca ‚Äì Recheio cremoso de pa√ßoca
‚Ä¢ Brownie Pistache ‚Äì Casquinha crocante, interior molhadinho
‚Ä¢ Brownie Brigadeiro ‚Äì Tradicional brigadeiro
‚Ä¢ ‚ö†Ô∏è Brownie Beijinho ‚Äì INDISPON√çVEL

üç´ DINDINS GOURMET:
‚Ä¢ Oreo ‚Äì R$ 5,50
‚Ä¢ Ninho com Avel√£ ‚Äì R$ 6,00
‚Ä¢ Ninho com Geleia de Morango ‚Äì R$ 6,00
‚Ä¢ Pa√ßoca ‚Äì R$ 5,50
‚Ä¢ Browninho ‚Äì R$ 5,50

ü•£ BOLOS NO POTE:
‚Ä¢ Ferrero ‚Äì R$ 12,00
‚Ä¢ Maracuj√° com Chocolate ‚Äì R$ 12,00
‚Ä¢ Ninho com Geleia de Morango ‚Äì R$ 11,00
‚Ä¢ ‚ö†Ô∏è Cenoura ‚Äì INDISPON√çVEL
‚Ä¢ ‚ö†Ô∏è Coco com Abacaxi ‚Äì INDISPON√çVEL
‚Ä¢ ‚ö†Ô∏è Prest√≠gio ‚Äì INDISPON√çVEL

üçÆ SOBREMESAS:
‚Ä¢ Del√≠cia de Abacaxi ‚Äì R$ 5,50
‚Ä¢ Pav√™ KitKat ‚Äì R$ 6,50
‚Ä¢ Sensa√ß√£o ‚Äì R$ 6,50
‚Ä¢ Torta Cookie ‚Äì R$ 6,50
‚Ä¢ Torta de Lim√£o ‚Äì R$ 5,00
‚Ä¢ ‚ö†Ô∏è Pudim ‚Äì INDISPON√çVEL

ü•ß EMPADAS:
‚Ä¢ Camar√£o ‚Äì R$ 6,00
‚Ä¢ Frango ‚Äì R$ 4,00
‚Ä¢ ‚ö†Ô∏è Carne do Sol ‚Äì INDISPON√çVEL

üçï SALGADOS:
‚Ä¢ Coxinha ‚Äì R$ 5,00
‚Ä¢ Frito Carne com Queijo ‚Äì R$ 5,50
‚Ä¢ Frito Misto ‚Äì R$ 4,70
‚Ä¢ Salsicha ‚Äì R$ 4,00

üéâ KITS FESTA (sob encomenda):
‚Ä¢ 100 Docinhos ‚Äì R$ 90,00
‚Ä¢ 50 Docinhos ‚Äì R$ 45,00
‚Ä¢ 100 Salgados ‚Äì R$ 65,00
‚Ä¢ 50 Salgados ‚Äì R$ 32,50
‚Ä¢ 100 Mini Brownies ‚Äì R$ 160,00
‚Ä¢ 50 Mini Brownies ‚Äì R$ 80,00

üì¶ REVENDA DE BROWNIES:
‚Ä¢ Pre√ßo: R$ 3,50/unidade (m√≠nimo 15 unid.)
‚Ä¢ Sabores: Brigadeiro, Ninho, Beijinho, Pa√ßoca
‚Ä¢ Condi√ß√µes: 50% entrada / 50% retirada

üí¨ INSTRU√á√ïES DE ATENDIMENTO (OBRIGAT√ìRIAS)

1. SAUDA√á√ÉO INICIAL:
"Ol√°, (user)! üëã Bem-vindo ao Mercado dos Sabores! üòä Temos brownies, bolos, salgados e muito mais. Do que voc√™ est√° com vontade hoje?"
‚Ä¢Voc√™ SEMPRE dever√° esperar a resposta do cliente para mandar o cat√°logo ou produtos a pronta entrega.

2. AO RECEBER PEDIDO:
Confirme produto, quantidade e valor total
Informe o tempo m√©dio de preparo (25‚Äì40 min)
Pe√ßa a forma de pagamento (PIX ou Dinheiro)
Pe√ßa a forma de entrega (Retirada Local ou UberFlash)

3. FECHAMENTO DO PEDIDO:
Quando o cliente confirmar o pedido, gere o resumo:

‚úÖ PEDIDO CONFIRMADO  
ID do Pedido: #MS${generateOrderId()}  
Produtos: [listar com quantidade e pre√ßo]  
Valor total: R$ [valor]  
Forma de pagamento: [PIX ou Dinheiro]  
Entrega: Retirada Local  
Tempo de preparo: 25 a 40 minutos
Data de retirada: (Caso seja encomenda. Data informada pelo cliente)
Data/hora do pedido: ${currentDateTime.full}

4. PRODUTOS INDISPON√çVEIS:
Nunca diga apenas "acabou".
Sempre ofere√ßa substitutos imediatos, ex:
"O Brownie Beijinho est√° indispon√≠vel üòî, mas temos o Brownie Ninho e o Pa√ßoca prontos para hoje! üòã"

5. FINALIZA√á√ÉO:
Sempre feche dizendo:
"Agradecemos pela prefer√™ncia! üíõ
Retirada: Rua Raimundo Lemos Dias, 68 ‚Äì Luciano Cavalcante.
Site com fotos e novidades: https://lojams.rf.gd"

‚öôÔ∏è TOM E ESTILO DE ATENDIMENTO:

Use emojis para transmitir simpatia üòäüéÇüç´ü•ßüçï
Seja direto, comercial, e assertivo (vendas acima de tudo)
Sempre reforce estoque, disponibilidade, pre√ßo e fechamento via WhatsApp
Se o cliente enrolar, pressione educadamente com frases como:
"Quer garantir o seu antes que acabe? Temos poucas unidades de pronta entrega. üòâ"

        ${groupName ? `Estamos no grupo "${groupName}".` : `Conversando com ${senderName}.`}
        ${history.length > 0 ? `Esta conversa tem ${history.length} mensagens de hist√≥rico.` : ''}
        
üìÖ CONTEXTO TEMPORAL:
‚Ä¢ Data atual: ${currentDateTime.date}
‚Ä¢ Hora atual: ${currentDateTime.time}
‚Ä¢ Dia da semana: ${currentDateTime.weekday}
‚Ä¢ Use estas informa√ß√µes para calcular prazos de entrega e disponibilidade`
      }
    ];

    // Adiciona hist√≥rico ao contexto
    history.forEach(conv => {
      messages.push({ role: "user", content: conv.sender_message });
      messages.push({ role: "assistant", content: conv.ai_response });
    });

    // Adiciona a mensagem atual
    messages.push({ role: "user", content: senderMessage });

    console.log(`ü§ñ Processando com ${messages.length} mensagens de contexto (${history.length} do hist√≥rico)`);

    // Processa a mensagem com a IA
    const response = await callAIWithFallback(messages);

    const aiResponse = response.choices[0].message.content;

    // Salva a conversa no banco
    const savedId = await saveConversation({
      senderName,
      groupName,
      isMessageFromGroup,
      senderMessage,
      aiResponse,
      messageDateTime,
      receiveMessageApp
    });

    // üõí Processar pedido se detectado - M√âTODO MELHORADO
    const sessionId = generateSessionId(senderName, groupName, isMessageFromGroup);
    const pedidoData = await processarPedido(aiResponse, sessionId, senderName, groupName, isMessageFromGroup);

    if (pedidoData) {
      const pedidoInfo = await salvarPedido(pedidoData);
      if (pedidoInfo) {
        console.log(`üéâ Pedido #${pedidoInfo.id} registrado com sucesso! C√≥digo: ${pedidoInfo.codigo}`);
        
        // Enviar notifica√ß√£o (opcional)
        await enviarNotificacaoPedido(pedidoInfo, pedidoData);
      }
    }

    if (savedId) {
      await cleanupOldMessages(senderName, groupName, isMessageFromGroup);
    }

    console.log(`‚úÖ Resposta gerada (MySQL: ${savedId ? 'SALVO' : 'N√ÉO SALVO'}): ${aiResponse.substring(0, 100)}...`);

    // Retorna a resposta
    res.json({
      data: [{
        message: aiResponse
      }]
    });

  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    
    let errorMessage = "Desculpe, estou tendo problemas t√©cnicos. Tente novamente!";
    
    if (error.code === 'RateLimitReached' || error.message?.includes('Rate limit')) {
      errorMessage = "Desculpe, atingi meu limite de uso por hoje. Por favor, tente novamente amanh√£!";
    }
    
    res.json({
      data: [{
        message: errorMessage
      }]
    });
  }
});

// Rotas administrativas para gerenciar produtos
app.get('/produtos', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const [rows] = await pool.execute('SELECT * FROM produtos_pronta_entrega');
    res.json({
      status: 'success',
      count: rows.length,
      data: rows
    });
  } catch (error) {
    console.error('Erro ao buscar produtos:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.post('/produtos', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { nome, descricao, preco, estoque } = req.body;
    
    const [result] = await pool.execute(
      'INSERT INTO produtos_pronta_entrega (nome, descricao, preco, estoque) VALUES (?, ?, ?, ?)',
      [nome, descricao, preco, estoque]
    );
    
    res.json({
      status: 'success',
      message: 'Produto adicionado com sucesso',
      id: result.insertId
    });
  } catch (error) {
    console.error('Erro ao adicionar produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.put('/produtos/:id', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    const { nome, descricao, preco, estoque } = req.body;
    
    await pool.execute(
      'UPDATE produtos_pronta_entrega SET nome = ?, descricao = ?, preco = ?, estoque = ? WHERE id = ?',
      [nome, descricao, preco, estoque, id]
    );
    
    res.json({
      status: 'success',
      message: 'Produto atualizado com sucesso'
    });
  } catch (error) {
    console.error('Erro ao atualizar produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.delete('/produtos/:id', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    
    await pool.execute('DELETE FROM produtos_pronta_entrega WHERE id = ?', [id]);
    
    res.json({
      status: 'success',
      message: 'Produto removido com sucesso'
    });
  } catch (error) {
    console.error('Erro ao remover produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Rotas para pedidos - VERS√ÉO ATUALIZADA
// Rota de diagn√≥stico do banco de dados
app.get('/diagnostico', async (req, res) => {
  try {
    const diagnostic = {
      mysql_enabled: mysqlEnabled,
      pool_available: !!pool,
      current_time: getCurrentDateTime(),
      api_keys: API_KEYS.length
    };

    if (mysqlEnabled && pool) {
      try {
        // Testar conex√£o
        const [testResult] = await pool.execute('SELECT 1 as test');
        diagnostic.connection_test = 'OK';
        
        // Contar registros nas tabelas
        const [pedidosCount] = await pool.execute('SELECT COUNT(*) as total FROM pedidos');
        const [conversationsCount] = await pool.execute('SELECT COUNT(*) as total FROM conversations');
        const [produtosCount] = await pool.execute('SELECT COUNT(*) as total FROM produtos_pronta_entrega');
        
        diagnostic.table_counts = {
          pedidos: pedidosCount[0].total,
          conversations: conversationsCount[0].total,
          produtos: produtosCount[0].total
        };

        // Verificar estrutura da tabela pedidos
        const [columns] = await pool.execute("SHOW COLUMNS FROM pedidos");
        diagnostic.pedidos_columns = columns.map(col => ({
          name: col.Field,
          type: col.Type,
          null: col.Null,
          key: col.Key
        }));

      } catch (dbError) {
        diagnostic.connection_test = 'ERROR: ' + dbError.message;
      }
    }

    res.json({
      status: 'success',
      diagnostic: diagnostic
    });

  } catch (error) {
    console.error('Erro no diagn√≥stico:', error);
    res.status(500).json({ 
      error: 'Erro no diagn√≥stico',
      details: error.message 
    });
  }
});

// Buscar pedido por ID espec√≠fico
app.get('/pedidos/:id', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    
    const [rows] = await pool.execute(`
      SELECT *, DATE_FORMAT(created_at, '%d/%m/%Y %H:%i') as data_pedido 
      FROM pedidos 
      WHERE id = ? OR pedido_id = ?
    `, [id, id]);
    
    if (rows.length === 0) {
      return res.status(404).json({ error: 'Pedido n√£o encontrado' });
    }
    
    const pedido = {
      ...rows[0],
      produtos_json: JSON.parse(rows[0].produtos_json)
    };
    
    res.json({
      status: 'success',
      data: pedido
    });
  } catch (error) {
    console.error('Erro ao buscar pedido:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Atualizar status do pedido
app.put('/pedidos/:id/status', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    const { status } = req.body;
    
    await pool.execute(
      'UPDATE pedidos SET status = ? WHERE id = ? OR pedido_id = ?',
      [status, id, id]
    );
    
    res.json({
      status: 'success',
      message: 'Status do pedido atualizado'
    });
  } catch (error) {
    console.error('Erro ao atualizar pedido:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Estat√≠sticas de pedidos
app.get('/pedidos/estatisticas', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const [total] = await pool.execute('SELECT COUNT(*) as total FROM pedidos');
    const [hoje] = await pool.execute(`
      SELECT COUNT(*) as hoje FROM pedidos 
      WHERE DATE(created_at) = CURDATE()
    `);
    const [revenue] = await pool.execute('SELECT SUM(valor_total) as revenue FROM pedidos');
    const [statusCounts] = await pool.execute(`
      SELECT status, COUNT(*) as count FROM pedidos GROUP BY status
    `);
    
    res.json({
      status: 'success',
      data: {
        total_pedidos: total[0].total,
        pedidos_hoje: hoje[0].hoje,
        faturamento_total: revenue[0].revenue || 0,
        status: statusCounts
      }
    });
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Rotas existentes (conversations, status, rotate-api, ping, health) mantidas iguais
app.get('/conversations', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const [rows] = await pool.execute('SELECT * FROM conversations ORDER BY created_at DESC LIMIT 50');
    res.json({ status: 'success', count: rows.length, data: rows });
  } catch (error) {
    console.error('Erro ao buscar conversas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.get('/status', async (req, res) => {
  try {
    let dbStatus = 'disabled';
    if (mysqlEnabled && pool) {
      try {
        await pool.execute('SELECT 1');
        dbStatus = 'connected';
      } catch (error) {
        dbStatus = 'error';
      }
    }

    const apiStats = API_KEYS.map((_, index) => ({
      index,
      isCurrent: index === currentApiIndex,
      rateLimited: rateLimitStats[index] ? true : false,
      rateLimitedAt: rateLimitStats[index]?.rateLimitedAt || null
    }));

    res.json({ 
      status: 'OK', 
      database: dbStatus,
      mysqlEnabled: mysqlEnabled,
      apis: { total: API_KEYS.length, current: currentApiIndex, statistics: apiStats },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      uptime: Math.floor(process.uptime()) + ' segundos'
    });
  } catch (error) {
    res.status(500).json({ status: 'Error', message: 'Service unhealthy' });
  }
});

app.post('/rotate-api', (req, res) => {
  const oldIndex = currentApiIndex;
  rotateToNextApi();
  
  res.json({
    message: 'API rotacionada',
    from: oldIndex,
    to: currentApiIndex,
    total_apis: API_KEYS.length
  });
});

// ROTA PING MODIFICADA - Agora mant√©m o MySQL ativo
app.get('/ping', async (req, res) => {
  try {
    // Executa keep-alive do MySQL se estiver dispon√≠vel
    let mysqlAlive = false;
    if (mysqlEnabled && pool) {
      mysqlAlive = await keepMySQLAlive();
    }

    res.status(200).json({
      status: 'OK',
      mysql: mysqlEnabled ? (mysqlAlive ? 'connected' : 'error') : 'disabled',
      apis: { total: API_KEYS.length, current: currentApiIndex },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      service: 'Railway MySQL + Multi-API + Sistema de Pedidos Aprimorado',
      mysql_keep_alive: mysqlAlive
    });
  } catch (error) {
    console.error('‚ùå Erro na rota /ping:', error);
    res.status(500).json({ 
      status: 'Error', 
      message: 'Service ping failed',
      mysql_keep_alive: false
    });
  }
});

app.get('/health', async (req, res) => {
  try {
    let dbStatus = 'disabled';
    let mysqlAlive = false;
    
    if (mysqlEnabled && pool) {
      try {
        await pool.execute('SELECT 1');
        dbStatus = 'connected';
        mysqlAlive = true;
      } catch (error) {
        dbStatus = 'error';
        mysqlAlive = false;
      }
    }

    res.status(200).json({ 
      status: 'OK', 
      database: dbStatus,
      mysqlEnabled: mysqlEnabled,
      mysql_alive: mysqlAlive,
      apis: { total: API_KEYS.length, current: currentApiIndex },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      uptime: Math.floor(process.uptime()) + ' segundos'
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'Error', 
      message: 'Service unhealthy',
      mysql_alive: false
    });
  }
});

app.get('/', (req, res) => {
  const currentDateTime = getCurrentDateTime();
  
  res.json({ 
    service: 'AutoReply Webhook com Multi-API + MySQL + Sistema de Pedidos Aprimorado',
    status: 'Online',
    mysql: mysqlEnabled ? 'CONECTADO' : 'DESCONECTADO',
    apis: { total: API_KEYS.length, current: currentApiIndex },
    model: model,
    deployment: 'Railway',
    currentDateTime: currentDateTime,
    endpoints: {
      webhook: 'POST /webhook',
      health: 'GET /health',
      status: 'GET /status',
      ping: 'GET /ping (com keep-alive MySQL)',
      'rotate-api': 'POST /rotate-api',
      conversations: 'GET /conversations',
      produtos: 'GET/POST/PUT/DELETE /produtos',
      pedidos: 'GET /pedidos',
      'pedido-especifico': 'GET /pedidos/:id',
      'pedidos-estatisticas': 'GET /pedidos/estatisticas',
      'atualizar-status': 'PUT /pedidos/:id/status'
    },
    features: {
      'multi-api': 'Rotacionamento autom√°tico de APIs',
      'mysql': 'Banco de dados para conversas e produtos',
      'produtos-dinamicos': 'Gerenciamento de estoque em tempo real',
      'sistema-pedidos': 'Registro autom√°tico de pedidos aprimorado',
      'resposta-completa': 'Armazena mensagem completa da IA',
      'id-pedido': 'Gera e armazena ID √∫nico do pedido',
      'extracao-flexivel': 'Extrai dados mesmo com varia√ß√µes no texto'
    },
    note: 'Sistema aprimorado com armazenamento completo da resposta da IA'
  });
});

// Inicializa o servidor
async function startServer() {
  console.log('üöÄ Iniciando servidor AutoReply com Sistema de Pedidos Aprimorado...');
  console.log(`üîë ${API_KEYS.length} chaves API configuradas`);
  console.log(`ü§ñ Modelo: ${model}`);
  
  await initializeDatabase();
  
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    const currentDateTime = getCurrentDateTime();
    console.log(`üéâ Servidor rodando na porta ${PORT}`);
    console.log(`üåê Webhook: POST /webhook`);
    console.log(`üõçÔ∏è  Gerenciar produtos: GET/POST/PUT/DELETE /produtos`);
    console.log(`üì¶ Gerenciar pedidos: GET /pedidos`);
    console.log(`üîç Buscar pedido espec√≠fico: GET /pedidos/:id`);
    console.log(`üìä Estat√≠sticas: GET /pedidos/estatisticas`);
    console.log(`üóÉÔ∏è  MySQL: ${mysqlEnabled ? '‚úÖ CONECTADO' : '‚ùå DESCONECTADO'}`);
    console.log(`üîã Keep-alive MySQL: ‚úÖ ATIVO via rota /ping`);
    console.log(`üìÖ Data/Hora do servidor: ${currentDateTime.full}`);
    
    console.log('\nüéØ SISTEMA DE PEDIDOS APRIMORADO:');
    console.log(`   ‚úÖ Armazenamento da mensagem completa da IA`);
    console.log(`   ‚úÖ Gera√ß√£o autom√°tica de ID do pedido`);
    console.log(`   ‚úÖ Extra√ß√£o flex√≠vel de dados do pedido`);
    console.log(`   ‚úÖ Fallback quando n√£o consegue extrair produtos`);
    console.log(`   ‚úÖ Busca de pedido por ID ou c√≥digo`);
    console.log(`   ‚úÖ Estat√≠sticas detalhadas por status`);
  });
}

startServer().catch(console.error);
