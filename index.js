const express = require('express');
const OpenAI = require('openai');
const mysql = require('mysql2/promise');

const app = express();
app.use(express.json());

// Configura√ß√µes das APIs - m√∫ltiplas chaves
const API_KEYS = [
  process.env.GITHUB_TOKEN_1,
  process.env.GITHUB_TOKEN_2,
  process.env.GITHUB_TOKEN_3,
  process.env.GITHUB_TOKEN_4,
].filter(Boolean);

const endpoint = "https://models.github.ai/inference";
const model = "openai/gpt-4.1";

// Sistema de rotacionamento de APIs
let currentApiIndex = 0;
let rateLimitStats = {};

// Cache para otimiza√ß√£o
let produtosCache = null;
let produtosCacheTimestamp = 0;
const CACHE_DURATION = 30000; // 30 segundos

let connectionTestCache = null;
let lastConnectionTest = 0;
const CONNECTION_TEST_INTERVAL = 60000; // 1 minuto

let lastKeepAlive = 0;
const KEEP_ALIVE_INTERVAL = 30000; // 30 segundos

let initializationPromise = null;

// String de conex√£o direta do Railway
const MYSQL_CONNECTION_STRING = "mysql://root:ZefFlJwoGgbGclwcSyOeZuvMGVqmhvtH@trolley.proxy.rlwy.net:52398/railway";

// Parse da string de conex√£o
function parseMySQLString(connectionString) {
  try {
    const matches = connectionString.match(/mysql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/(.+)/);
    if (matches) {
      return {
        host: matches[3],
        port: parseInt(matches[4]),
        user: matches[1],
        password: matches[2],
        database: matches[5],
        connectTimeout: 10000,
        acquireTimeout: 10000,
        timeout: 10000,
        charset: 'utf8mb4'
      };
    }
  } catch (error) {
    console.error('‚ùå Erro ao parsear string MySQL:', error);
  }
  return null;
}

// Configura√ß√µes do MySQL
const dbConfig = parseMySQLString(MYSQL_CONNECTION_STRING) || {
  host: process.env.MYSQLHOST,
  port: process.env.MYSQLPORT || 3306,
  user: process.env.MYSQLUSER,
  password: process.env.MYSQLPASSWORD,
  database: process.env.MYSQLDATABASE,
  connectTimeout: 10000,
  acquireTimeout: 10000,
  timeout: 10000,
  charset: 'utf8mb4'
};

// Pr√©-compila√ß√£o de queries SQL frequentes
const SQL_QUERIES = {
  INSERT_CONVERSATION: `INSERT INTO conversations 
       (session_id, sender_name, group_name, is_group_message, sender_message, ai_response, message_datetime, receive_message_app) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
  
  SELECT_CONVERSATIONS: `SELECT sender_message, ai_response, created_at 
       FROM conversations 
       WHERE session_id = ? 
       ORDER BY created_at DESC 
       LIMIT ?`,
  
  SELECT_PRODUCTS: `SELECT nome, descricao, preco, estoque FROM produtos_pronta_entrega 
       WHERE disponibilidade = 'Pronta Entrega' AND estoque > 0 
       LIMIT 50`,
  
  KEEP_ALIVE: `SELECT 1 as keep_alive`,
  TEST_CONNECTION: `SELECT 1 as test`
};

// Otimiza√ß√£o da formata√ß√£o de data/hora
const dateTimeFormatter = new Intl.DateTimeFormat('pt-BR', {
  timeZone: 'America/Sao_Paulo',
  day: '2-digit',
  month: '2-digit',
  year: 'numeric',
  hour: '2-digit',
  minute: '2-digit',
  second: '2-digit',
  hour12: false
});

const weekdayFormatter = new Intl.DateTimeFormat('pt-BR', {
  timeZone: 'America/Sao_Paulo',
  weekday: 'long'
});

// Verifica se h√° pelo menos uma chave API dispon√≠vel
if (API_KEYS.length === 0) {
  console.error("ERRO: Nenhuma GITHUB_TOKEN encontrada nas vari√°veis de ambiente");
  process.exit(1);
}

console.log(`üîë ${API_KEYS.length} chaves API configuradas`);

// Fun√ß√£o para obter data e hora formatadas (OTIMIZADA)
function getCurrentDateTime() {
  const now = new Date();
  const formatted = dateTimeFormatter.formatToParts(now);
  const weekday = weekdayFormatter.format(now);
  
  const parts = {};
  formatted.forEach(part => {
    parts[part.type] = part.value;
  });

  return {
    date: `${parts.day}/${parts.month}/${parts.year}`,
    time: `${parts.hour}:${parts.minute}:${parts.second}`,
    full: `${parts.day}/${parts.month}/${parts.year} ${parts.hour}:${parts.minute}:${parts.second}`,
    weekday: weekday,
    timestamp: now.getTime()
  };
}

// Fun√ß√£o para obter o cliente atual
function getCurrentClient() {
  const token = API_KEYS[currentApiIndex];
  return new OpenAI({
    baseURL: endpoint,
    apiKey: token
  });
}

// Fun√ß√£o para rotacionar para a pr√≥xima API (OTIMIZADA)
function rotateToNextApi() {
  const oldIndex = currentApiIndex;
  const totalApis = API_KEYS.length;
  
  // Encontra pr√≥xima API dispon√≠vel (n√£o rate limited recentemente)
  for (let i = 1; i <= totalApis; i++) {
    const nextIndex = (oldIndex + i) % totalApis;
    const rateLimitInfo = rateLimitStats[nextIndex];
    
    // Se n√£o tem info de rate limit ou passou mais de 1 minuto, usa esta
    if (!rateLimitInfo || (Date.now() - rateLimitInfo.rateLimitedAt) > 60000) {
      currentApiIndex = nextIndex;
      console.log(`üîÑ Rotacionando API: ${oldIndex} ‚Üí ${currentApiIndex}`);
      return getCurrentClient();
    }
  }
  
  // Se todas est√£o com rate limit recente, usa a pr√≥xima mesmo assim
  currentApiIndex = (oldIndex + 1) % totalApis;
  console.log(`üîÑ Rotacionando API (todas limitadas): ${oldIndex} ‚Üí ${currentApiIndex}`);
  return getCurrentClient();
}

// Fun√ß√£o para fazer chamada √† API com tratamento de rate limit
async function callAIWithFallback(messages, maxRetries = API_KEYS.length) {
  let lastError;
  
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    const client = getCurrentClient();
    const currentTokenIndex = currentApiIndex;
    
    try {
      console.log(`ü§ñ Tentando API ${currentTokenIndex} (tentativa ${attempt + 1}/${maxRetries})`);
      
      const response = await client.chat.completions.create({
        messages: messages,
        temperature: 0.3,
        top_p: 1.0,
        model: model
      });
      
      console.log(`‚úÖ Sucesso com API ${currentTokenIndex}`);
      return response;
      
    } catch (error) {
      lastError = error;
      
      if (error.code === 'RateLimitReached' || error.message?.includes('Rate limit')) {
        console.log(`‚è∞ Rate limit na API ${currentTokenIndex}: ${error.message}`);
        rotateToNextApi();
        
        if (attempt < maxRetries - 1) {
          console.log(`üîÑ Tentando pr√≥xima API...`);
          continue;
        }
      } else {
        console.error(`‚ùå Erro na API ${currentTokenIndex}:`, error.message);
        
        if (attempt < maxRetries - 1) {
          console.log(`üîÑ Tentando pr√≥xima API devido a erro...`);
          rotateToNextApi();
          continue;
        }
      }
    }
  }
  
  throw lastError || new Error('Todas as APIs falharam');
}

// Pool de conex√µes MySQL
let pool;
let mysqlEnabled = false;

// Fun√ß√£o para testar conex√£o MySQL (OTIMIZADA com cache)
async function testMySQLConnection() {
  const now = Date.now();
  
  if (connectionTestCache && (now - lastConnectionTest) < CONNECTION_TEST_INTERVAL) {
    return connectionTestCache;
  }

  console.log('üîå Testando conex√£o MySQL...');
  
  try {
    const testConnection = await mysql.createConnection(dbConfig);
    await testConnection.execute(SQL_QUERIES.TEST_CONNECTION);
    console.log('‚úÖ Teste de conex√£o MySQL: OK');
    await testConnection.end();
    
    connectionTestCache = true;
    lastConnectionTest = now;
    return true;
  } catch (error) {
    console.error('‚ùå Teste de conex√£o MySQL falhou:', error.message);
    connectionTestCache = false;
    lastConnectionTest = now;
    return false;
  }
}

// Fun√ß√£o para manter o MySQL ativo (OTIMIZADA)
async function keepMySQLAlive() {
  const now = Date.now();
  if (now - lastKeepAlive < KEEP_ALIVE_INTERVAL) {
    return true;
  }

  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel para keep-alive');
    return false;
  }

  try {
    const [rows] = await pool.execute(SQL_QUERIES.KEEP_ALIVE);
    lastKeepAlive = now;
    console.log('‚úÖ Keep-alive MySQL executado com sucesso');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no keep-alive MySQL:', error.message);
    
    // Tentar reconectar se houver erro
    try {
      console.log('üîÑ Tentando reconectar ao MySQL...');
      await initializeDatabase();
    } catch (reconnectError) {
      console.error('‚ùå Falha na reconex√£o MySQL:', reconnectError.message);
    }
    
    return false;
  }
}

// Fun√ß√£o para buscar produtos de pronta entrega (OTIMIZADA com cache)
async function getProntaEntregaProducts() {
  const now = Date.now();
  
  // Retorna cache se ainda √© v√°lido
  if (produtosCache && (now - produtosCacheTimestamp) < CACHE_DURATION) {
    return produtosCache;
  }

  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, usando produtos padr√£o');
    return "Nenhum produto dispon√≠vel para pronta entrega no momento.";
  }

  try {
    const [rows] = await pool.execute(SQL_QUERIES.SELECT_PRODUCTS);

    if (rows.length === 0) {
      produtosCache = "Nenhum produto dispon√≠vel para pronta entrega no momento.";
    } else {
      let productsString = "üì¶ PRODUTOS DISPON√çVEIS ‚Äì PRONTA ENTREGA\n\n";
      // Usando for loop em vez de forEach para melhor performance
      for (let i = 0; i < rows.length; i++) {
        const product = rows[i];
        productsString += `üéÇ ${product.nome}\n` +
                         `‚Ä¢ Descri√ß√£o: ${product.descricao}\n` +
                         `‚Ä¢ Pre√ßo: R$ ${product.preco} cada\n` +
                         `‚Ä¢ Estoque: ${product.estoque} unidades\n` +
                         `‚Ä¢ Disponibilidade: ‚úÖ Pronta Entrega\n\n`;
      }
      produtosCache = productsString;
    }

    produtosCacheTimestamp = now;
    return produtosCache;
  } catch (error) {
    console.error('‚ùå Erro ao buscar produtos de pronta entrega:', error.message);
    return "Nenhum produto dispon√≠vel para pronta entrega no momento.";
  }
}

// Fun√ß√£o para gerar session_id
function generateSessionId(senderName, groupName, isMessageFromGroup) {
  if (isMessageFromGroup && groupName) {
    return `group_${groupName}_user_${senderName}`;
  }
  return `user_${senderName}`;
}

// Fun√ß√£o para salvar conversa no banco (OTIMIZADA)
async function saveConversation(conversationData) {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, pulando salvamento');
    return null;
  }

  try {
    const sessionId = generateSessionId(
      conversationData.senderName,
      conversationData.groupName,
      conversationData.isMessageFromGroup
    );

    console.log(`üíæ Salvando conversa para: ${sessionId}`);
    
    const [result] = await pool.execute(
      SQL_QUERIES.INSERT_CONVERSATION,
      [
        sessionId,
        conversationData.senderName || '',
        conversationData.groupName || '',
        conversationData.isMessageFromGroup ? 1 : 0,
        conversationData.senderMessage.substring(0, 4000) || '',
        conversationData.aiResponse.substring(0, 4000) || '',
        conversationData.messageDateTime || Date.now(),
        conversationData.receiveMessageApp || 'unknown'
      ]
    );
    
    console.log(`‚úÖ Conversa salva - ID: ${result.insertId}`);
    return result.insertId;
    
  } catch (error) {
    console.error('‚ùå Erro ao salvar conversa:', error.message);
    return null;
  }
}

// Fun√ß√£o para buscar hist√≥rico de conversas (OTIMIZADA)
async function getConversationHistory(senderName, groupName, isMessageFromGroup, limit = 4) {
  if (!mysqlEnabled || !pool) {
    console.log('‚ö†Ô∏è  MySQL n√£o dispon√≠vel, sem hist√≥rico');
    return [];
  }

  try {
    const sessionId = generateSessionId(senderName, groupName, isMessageFromGroup);
    
    console.log(`üìö Buscando hist√≥rico para sess√£o: ${sessionId}`);
    
    const safeLimit = Math.min(parseInt(limit), 10);
    const [rows] = await pool.execute(
      SQL_QUERIES.SELECT_CONVERSATIONS,
      [sessionId, safeLimit]
    );
    
    console.log(`‚úÖ Hist√≥rico carregado: ${rows.length} mensagens`);
    return rows.reverse();
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar hist√≥rico:', error.message);
    return [];
  }
}

// Fun√ß√£o para limpar hist√≥rico antigo
async function cleanupOldMessages(senderName, groupName, isMessageFromGroup) {
  if (!mysqlEnabled || !pool) return;

  try {
    const sessionId = generateSessionId(senderName, groupName, isMessageFromGroup);
    
    const [recentIds] = await pool.execute(
      `SELECT id FROM conversations 
       WHERE session_id = ? 
       ORDER BY created_at DESC 
       LIMIT 15`,
      [sessionId]
    );
    
    if (recentIds.length > 0) {
      const keepIds = recentIds.map(row => row.id);
      const placeholders = keepIds.map(() => '?').join(',');
      
      await pool.execute(
        `DELETE FROM conversations 
         WHERE session_id = ? AND id NOT IN (${placeholders})`,
        [sessionId, ...keepIds]
      );
      
      console.log(`üßπ Mensagens antigas limpas para: ${sessionId}`);
    }
  } catch (error) {
    console.error('‚ùå Erro ao limpar mensagens antigas:', error.message);
  }
}

// Inicializa√ß√£o do banco (OTIMIZADA)
async function initializeDatabase() {
  // Evita m√∫ltiplas inicializa√ß√µes simult√¢neas
  if (initializationPromise) {
    return initializationPromise;
  }

  initializationPromise = (async () => {
    console.log('üîÑ Inicializando MySQL para Railway...');
    
    if (!dbConfig.host || !dbConfig.user || !dbConfig.password || !dbConfig.database) {
      console.log('üö´ Configura√ß√µes do MySQL incompletas');
      mysqlEnabled = false;
      return;
    }

    const connectionTest = await testMySQLConnection();
    if (!connectionTest) {
      console.log('üö´ MySQL desabilitado - n√£o foi poss√≠vel conectar');
      mysqlEnabled = false;
      return;
    }

    try {
      pool = mysql.createPool({
        ...dbConfig,
        waitForConnections: true,
        connectionLimit: 5,
        queueLimit: 0,
        acquireTimeout: 8000,
        timeout: 8000,
      });

      const connection = await pool.getConnection();
      console.log('‚úÖ Pool MySQL conectado com sucesso');
      
      // Executa todas as cria√ß√µes de tabela em paralelo
      await Promise.all([
        connection.execute(`
          CREATE TABLE IF NOT EXISTS conversations (
            id INT AUTO_INCREMENT PRIMARY KEY,
            session_id VARCHAR(255) NOT NULL,
            sender_name VARCHAR(255) NOT NULL,
            group_name VARCHAR(255),
            is_group_message BOOLEAN DEFAULT FALSE,
            sender_message TEXT NOT NULL,
            ai_response TEXT NOT NULL,
            message_datetime BIGINT,
            receive_message_app VARCHAR(100),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX session_idx (session_id),
            INDEX created_idx (created_at)
          )
        `),
        connection.execute(`
          CREATE TABLE IF NOT EXISTS produtos_pronta_entrega (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(100) NOT NULL,
            descricao TEXT,
            preco DECIMAL(10,2) NOT NULL,
            estoque INT NOT NULL,
            disponibilidade ENUM('Pronta Entrega') DEFAULT 'Pronta Entrega',
            INDEX disponibilidade_idx (disponibilidade),
            INDEX estoque_idx (estoque)
          )
        `)
      ]);
      
      console.log('‚úÖ Tabelas verificadas/criadas');
      
      // Testa a funcionalidade de produtos
      console.log('üîÑ Testando busca de produtos...');
      const produtosTeste = await getProntaEntregaProducts();
      console.log('‚úÖ Teste de produtos:', produtosTeste ? 'OK' : 'FALHOU');
      
      connection.release();
      mysqlEnabled = true;
      console.log('üéâ MySQL totalmente inicializado e funcionando!');
      
    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o do MySQL:', error.message);
      mysqlEnabled = false;
      
      if (pool) {
        try {
          await pool.end();
          pool = null;
        } catch (e) {
          console.error('Erro ao fechar pool:', e.message);
        }
      }
    }
  })();

  return initializationPromise;
}

// Webhook principal
app.post('/webhook', async (req, res) => {
  try {
    const {
      senderMessage,
      senderName,
      groupName,
      isMessageFromGroup,
      messageDateTime,
      receiveMessageApp
    } = req.body;

    console.log(`üì© Mensagem de ${senderName}${groupName ? ` no grupo ${groupName}` : ''}: ${senderMessage}`);
    console.log(`üóÉÔ∏è  MySQL: ${mysqlEnabled ? 'HABILITADO' : 'DESABILITADO'}`);
    console.log(`üîë API atual: ${currentApiIndex}`);

    // Obt√©m data e hora atual
    const currentDateTime = getCurrentDateTime();
    console.log(`üìÖ Data/Hora atual: ${currentDateTime.full}`);

    // Busca produtos de pronta entrega do banco (com cache)
    const prontaEntregaProducts = await getProntaEntregaProducts();

    // Busca hist√≥rico recente da conversa
    const history = await getConversationHistory(senderName, groupName, isMessageFromGroup, 4);
    
    // Prepara o contexto com hist√≥rico e produtos din√¢micos
    const messages = [
      {
        role: "system",
        content: `Voc√™ √© o atendente oficial e exclusivo da loja "Mercado dos Sabores". Seu nome √© Saborzinho.
Sua √∫nica fun√ß√£o √© vender os produtos da loja e registrar pedidos.
Voc√™ N√ÉO responde perguntas sobre outros assuntos.
Voc√™ N√ÉO conversa fora do contexto da loja.
Voc√™ N√ÉO fala sobre outros estabelecimentos.
Voc√™ em hip√≥tese alguma dever√° dar desconto em caso de insist√™ncia pedir para o cliente falar com atendimento humanizado.
Voc√™ SEMPRE mant√©m o foco total em vendas, produtos e pedidos.
Voc√™ dever√° mandar o atendimento humanizado sempre quando o cliente solicitar.
Voce SEMPRE devera mostrar se o produto escolhido pelo cliente tem dispon√≠vel em pronta entrega. 
Voce SEMPRE devera dizer quando tentarem comprar um produto que nao esta dispon√≠vel em pronta entrega, que o mesmo dever√° fazer uma encomenda.

üìÖ INFORMA√á√ÉO DE DATA E HORA ATUAL:
‚Ä¢ Data: ${currentDateTime.date}
‚Ä¢ Hora: ${currentDateTime.time}
‚Ä¢ Dia da semana: ${currentDateTime.weekday}
‚Ä¢ Timestamp: ${currentDateTime.timestamp}

üìç INFORMA√á√ïES DA LOJA:

‚Ä¢ Nome: Mercado dos Sabores
‚Ä¢ Atendimento humanizado: Sabrina - Celular: 85991665141
‚Ä¢ Endere√ßo: Rua Raimundo Lemos Dias, 68 ‚Äì Luciano Cavalcante, Fortaleza‚ÄìCE
‚Ä¢ Pagamento: PIX üí≥ ou Dinheiro üíµ
‚Ä¢ Pix Celular: (85) 9 91665141 - Banco Inter - Sabrina Angela 
‚Ä¢ encomenda: A loja tem 2 dias √∫teis para entregar a encomenda.
‚Ä¢ Retirada: Local ou UberFlash (custo do cliente)
‚Ä¢ Site: https://lojams.rf.gd
‚Ä¢ Tempo m√©dio de preparo: ‚è±Ô∏è 25 a 40 minutos

---

${prontaEntregaProducts}

---

üõçÔ∏è CAT√ÅLOGO COMPLETO

üéÇ BROWNIES (R$ 4,50 cada):
‚Ä¢ Brownie Ferrero ‚Äì Brigadeiro 50% cacau, creme de avel√£ e amendoim
‚Ä¢ Brownie Doce de Leite ‚Äì Recheio cremoso de doce de leite
‚Ä¢ Brownie Ninho ‚Äì Recheio cremoso de leite Ninho
‚Ä¢ Brownie Pa√ßoca ‚Äì Recheio cremoso de pa√ßoca
‚Ä¢ Brownie Pistache ‚Äì Casquinha crocante, interior molhadinho
‚Ä¢ Brownie Brigadeiro ‚Äì Tradicional brigadeiro
‚Ä¢ ‚ö†Ô∏è Brownie Beijinho ‚Äì INDISPON√çVEL

üç´ DINDINS GOURMET:
‚Ä¢ Oreo ‚Äì R$ 5,50
‚Ä¢ Ninho com Avel√£ ‚Äì R$ 6,00
‚Ä¢ Ninho com Geleia de Morango ‚Äì R$ 6,00
‚Ä¢ Pa√ßoca ‚Äì R$ 5,50
‚Ä¢ Browninho ‚Äì R$ 5,50

ü•£ BOLOS NO POTE:
‚Ä¢ Ferrero ‚Äì R$ 12,00
‚Ä¢ Maracuj√° com Chocolate ‚Äì R$ 12,00
‚Ä¢ Ninho com Geleia de Morango ‚Äì R$ 11,00
‚Ä¢ ‚ö†Ô∏è Cenoura ‚Äì INDISPON√çVEL
‚Ä¢ ‚ö†Ô∏è Coco com Abacaxi ‚Äì INDISPON√çVEL
‚Ä¢ ‚ö†Ô∏è Prest√≠gio ‚Äì INDISPON√çVEL

üçÆ SOBREMESAS:
‚Ä¢ Del√≠cia de Abacaxi ‚Äì R$ 5,50
‚Ä¢ Pav√™ KitKat ‚Äì R$ 6,50
‚Ä¢ Sensa√ß√£o ‚Äì R$ 6,50
‚Ä¢ Torta Cookie ‚Äì R$ 6,50
‚Ä¢ Torta de Lim√£o ‚Äì R$ 5,00
‚Ä¢ ‚ö†Ô∏è Pudim ‚Äì INDISPON√çVEL

ü•ß EMPADAS:
‚Ä¢ Camar√£o ‚Äì R$ 6,00
‚Ä¢ Frango ‚Äì R$ 4,00
‚Ä¢ ‚ö†Ô∏è Carne do Sol ‚Äì INDISPON√çVEL

üçï SALGADOS:
‚Ä¢ Coxinha ‚Äì R$ 5,00
‚Ä¢ Frito Carne com Queijo ‚Äì R$ 5,50
‚Ä¢ Frito Misto ‚Äì R$ 4,70
‚Ä¢ Salsicha ‚Äì R$ 4,00

üéâ KITS FESTA (sob encomenda):
‚Ä¢ 100 Docinhos ‚Äì R$ 90,00
‚Ä¢ 50 Docinhos ‚Äì R$ 45,00
‚Ä¢ 100 Salgados ‚Äì R$ 65,00
‚Ä¢ 50 Salgados ‚Äì R$ 32,50
‚Ä¢ 100 Mini Brownies ‚Äì R$ 160,00
‚Ä¢ 50 Mini Brownies ‚Äì R$ 80,00

üì¶ REVENDA DE BROWNIES:
‚Ä¢ Pre√ßo: R$ 3,50/unidade (m√≠nimo 15 unid.)
‚Ä¢ Sabores: Brigadeiro, Ninho, Beijinho, Pa√ßoca
‚Ä¢ Condi√ß√µes: 50% entrada / 50% retirada

üí¨ INSTRU√á√ïES DE ATENDIMENTO (OBRIGAT√ìRIAS)

1. SAUDA√á√ÉO INICIAL:
"Ol√°, (user)! üëã Bem-vindo ao Mercado dos Sabores! üòä Temos brownies, bolos, salgados e muito mais. Do que voc√™ est√° com vontade hoje?"
‚Ä¢Voc√™ SEMPRE dever√° esperar a resposta do cliente para mandar o cat√°logo ou produtos a pronta entrega.

2. AO RECEBER PEDIDO:
Confirme produto, quantidade e valor total
Informe o tempo m√©dio de preparo (25‚Äì40 min)
Pe√ßa a forma de pagamento (PIX ou Dinheiro)
Pe√ßa a forma de entrega (Retirada Local ou UberFlash)

3. FECHAMENTO DO PEDIDO:
Quando o cliente confirmar o pedido, gere o resumo:

‚úÖ PEDIDO CONFIRMADO  
ID do Pedido: #MSXXXX  
Produtos: [listar com quantidade e pre√ßo]  
Valor total: R$ [valor]  
Forma de pagamento: [PIX ou Dinheiro]  
Entrega: Retirada Local  
Tempo de preparo: 25 a 40 minutos
Data de retirada: (Caso seja encomenda. Data informada pelo cliente)
Data/hora do pedido: ${currentDateTime.full}

4. PRODUTOS INDISPON√çVEIS:
Nunca diga apenas "acabou".
Sempre ofere√ßa substitutos imediatos, ex:
"O Brownie Beijinho est√° indispon√≠vel üòî, mas temos o Brownie Ninho e o Pa√ßoca prontos para hoje! üòã"

5. FINALIZA√á√ÉO:
Sempre feche dizendo:
"Agradecemos pela prefer√™ncia! üíõ
Retirada: Rua Raimundo Lemos Dias, 68 ‚Äì Luciano Cavalcante.
Site com fotos e novidades: https://lojams.rf.gd"

‚öôÔ∏è TOM E ESTILO DE ATENDIMENTO:

Use emojis para transmitir simpatia üòäüéÇüç´ü•ßüçï
Seja direto, comercial, e assertivo (vendas acima de tudo)
Sempre reforce estoque, disponibilidade, pre√ßo e fechamento via WhatsApp
Se o cliente enrolar, pressione educadamente com frases como:
"Quer garantir o seu antes que acabe? Temos poucas unidades de pronta entrega. üòâ"

        ${groupName ? `Estamos no grupo "${groupName}".` : `Conversando com ${senderName}.`}
        ${history.length > 0 ? `Esta conversa tem ${history.length} mensagens de hist√≥rico.` : ''}
        
üìÖ CONTEXTO TEMPORAL:
‚Ä¢ Data atual: ${currentDateTime.date}
‚Ä¢ Hora atual: ${currentDateTime.time}
‚Ä¢ Dia da semana: ${currentDateTime.weekday}
‚Ä¢ Use estas informa√ß√µes para calcular prazos de entrega e disponibilidade`
      }
    ];

    // Adiciona hist√≥rico ao contexto
    for (let i = 0; i < history.length; i++) {
      const conv = history[i];
      messages.push({ role: "user", content: conv.sender_message });
      messages.push({ role: "assistant", content: conv.ai_response });
    }

    // Adiciona a mensagem atual
    messages.push({ role: "user", content: senderMessage });

    console.log(`ü§ñ Processando com ${messages.length} mensagens de contexto (${history.length} do hist√≥rico)`);

    // Processa a mensagem com a IA
    const response = await callAIWithFallback(messages);

    const aiResponse = response.choices[0].message.content;

    // Salva a conversa no banco
    const savedId = await saveConversation({
      senderName,
      groupName,
      isMessageFromGroup,
      senderMessage,
      aiResponse,
      messageDateTime,
      receiveMessageApp
    });

    if (savedId) {
      await cleanupOldMessages(senderName, groupName, isMessageFromGroup);
    }

    console.log(`‚úÖ Resposta gerada (MySQL: ${savedId ? 'SALVO' : 'N√ÉO SALVO'}): ${aiResponse.substring(0, 100)}...`);

    // Retorna a resposta
    res.json({
      data: [{
        message: aiResponse
      }]
    });

  } catch (error) {
    console.error('‚ùå Erro ao processar mensagem:', error);
    
    let errorMessage = "Desculpe, estou tendo problemas t√©cnicos. Tente novamente!";
    
    if (error.code === 'RateLimitReached' || error.message?.includes('Rate limit')) {
      errorMessage = "Desculpe, atingi meu limite de uso por hoje. Por favor, tente novamente amanh√£!";
    }
    
    res.json({
      data: [{
        message: errorMessage
      }]
    });
  }
});

// Rotas administrativas para gerenciar produtos
app.get('/produtos', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const [rows] = await pool.execute('SELECT * FROM produtos_pronta_entrega');
    res.json({
      status: 'success',
      count: rows.length,
      data: rows
    });
  } catch (error) {
    console.error('Erro ao buscar produtos:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.post('/produtos', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { nome, descricao, preco, estoque } = req.body;
    
    const [result] = await pool.execute(
      'INSERT INTO produtos_pronta_entrega (nome, descricao, preco, estoque) VALUES (?, ?, ?, ?)',
      [nome, descricao, preco, estoque]
    );
    
    // Invalida o cache
    produtosCache = null;
    
    res.json({
      status: 'success',
      message: 'Produto adicionado com sucesso',
      id: result.insertId
    });
  } catch (error) {
    console.error('Erro ao adicionar produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.put('/produtos/:id', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    const { nome, descricao, preco, estoque } = req.body;
    
    await pool.execute(
      'UPDATE produtos_pronta_entrega SET nome = ?, descricao = ?, preco = ?, estoque = ? WHERE id = ?',
      [nome, descricao, preco, estoque, id]
    );
    
    // Invalida o cache
    produtosCache = null;
    
    res.json({
      status: 'success',
      message: 'Produto atualizado com sucesso'
    });
  } catch (error) {
    console.error('Erro ao atualizar produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.delete('/produtos/:id', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const { id } = req.params;
    
    await pool.execute('DELETE FROM produtos_pronta_entrega WHERE id = ?', [id]);
    
    // Invalida o cache
    produtosCache = null;
    
    res.json({
      status: 'success',
      message: 'Produto removido com sucesso'
    });
  } catch (error) {
    console.error('Erro ao remover produto:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

// Rotas existentes
app.get('/conversations', async (req, res) => {
  if (!mysqlEnabled || !pool) {
    return res.status(500).json({ error: 'MySQL n√£o dispon√≠vel' });
  }

  try {
    const [rows] = await pool.execute('SELECT * FROM conversations ORDER BY created_at DESC LIMIT 50');
    res.json({ status: 'success', count: rows.length, data: rows });
  } catch (error) {
    console.error('Erro ao buscar conversas:', error);
    res.status(500).json({ error: 'Erro interno do servidor' });
  }
});

app.get('/status', async (req, res) => {
  try {
    let dbStatus = 'disabled';
    if (mysqlEnabled && pool) {
      try {
        await pool.execute(SQL_QUERIES.KEEP_ALIVE);
        dbStatus = 'connected';
      } catch (error) {
        dbStatus = 'error';
      }
    }

    const apiStats = API_KEYS.map((_, index) => ({
      index,
      isCurrent: index === currentApiIndex,
      rateLimited: rateLimitStats[index] ? true : false,
      rateLimitedAt: rateLimitStats[index]?.rateLimitedAt || null
    }));

    res.json({ 
      status: 'OK', 
      database: dbStatus,
      mysqlEnabled: mysqlEnabled,
      apis: { total: API_KEYS.length, current: currentApiIndex, statistics: apiStats },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      uptime: Math.floor(process.uptime()) + ' segundos',
      cache: {
        produtos: produtosCache ? 'ATIVO' : 'INATIVO',
        connectionTest: connectionTestCache ? 'ATIVO' : 'INATIVO'
      }
    });
  } catch (error) {
    res.status(500).json({ status: 'Error', message: 'Service unhealthy' });
  }
});

app.post('/rotate-api', (req, res) => {
  const oldIndex = currentApiIndex;
  rotateToNextApi();
  
  res.json({
    message: 'API rotacionada',
    from: oldIndex,
    to: currentApiIndex,
    total_apis: API_KEYS.length
  });
});

// ROTA PING MODIFICADA - Agora mant√©m o MySQL ativo
app.get('/ping', async (req, res) => {
  try {
    // Executa keep-alive do MySQL se estiver dispon√≠vel
    let mysqlAlive = false;
    if (mysqlEnabled && pool) {
      mysqlAlive = await keepMySQLAlive();
    }

    res.status(200).json({
      status: 'OK',
      mysql: mysqlEnabled ? (mysqlAlive ? 'connected' : 'error') : 'disabled',
      apis: { total: API_KEYS.length, current: currentApiIndex },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      service: 'Railway MySQL + Multi-API (OTIMIZADO)',
      mysql_keep_alive: mysqlAlive,
      optimizations: {
        cache_produtos: produtosCache ? 'ATIVO' : 'INATIVO',
        cache_connection: connectionTestCache ? 'ATIVO' : 'INATIVO',
        precompiled_queries: 'ATIVO',
        intelligent_rotation: 'ATIVO'
      }
    });
  } catch (error) {
    console.error('‚ùå Erro na rota /ping:', error);
    res.status(500).json({ 
      status: 'Error', 
      message: 'Service ping failed',
      mysql_keep_alive: false
    });
  }
});

app.get('/health', async (req, res) => {
  try {
    let dbStatus = 'disabled';
    let mysqlAlive = false;
    
    if (mysqlEnabled && pool) {
      try {
        await pool.execute(SQL_QUERIES.KEEP_ALIVE);
        dbStatus = 'connected';
        mysqlAlive = true;
      } catch (error) {
        dbStatus = 'error';
        mysqlAlive = false;
      }
    }

    res.status(200).json({ 
      status: 'OK', 
      database: dbStatus,
      mysqlEnabled: mysqlEnabled,
      mysql_alive: mysqlAlive,
      apis: { total: API_KEYS.length, current: currentApiIndex },
      model: model,
      timestamp: new Date().toISOString(),
      currentDateTime: getCurrentDateTime(),
      uptime: Math.floor(process.uptime()) + ' segundos',
      optimizations: 'CACHE+PRE-COMPILATION+INTELLIGENT_ROTATION'
    });
  } catch (error) {
    res.status(500).json({ 
      status: 'Error', 
      message: 'Service unhealthy',
      mysql_alive: false
    });
  }
});

app.get('/', (req, res) => {
  const currentDateTime = getCurrentDateTime();
  
  res.json({ 
    service: 'AutoReply Webhook com Multi-API + MySQL + Produtos Din√¢micos (OTIMIZADO)',
    status: 'Online',
    mysql: mysqlEnabled ? 'CONECTADO' : 'DESCONECTADO',
    apis: { total: API_KEYS.length, current: currentApiIndex },
    model: model,
    deployment: 'Railway',
    currentDateTime: currentDateTime,
    optimizations: [
      'Cache de produtos (30s)',
      'Cache de teste de conex√£o (60s)',
      'Keep-alive inteligente (30s)',
      'Rotacionamento inteligente de APIs',
      'Queries SQL pr√©-compiladas',
      'Formata√ß√£o de data otimizada',
      'Inicializa√ß√£o √∫nica do banco'
    ],
    endpoints: {
      webhook: 'POST /webhook',
      health: 'GET /health',
      status: 'GET /status',
      ping: 'GET /ping (com keep-alive MySQL)',
      'rotate-api': 'POST /rotate-api',
      conversations: 'GET /conversations',
      produtos: 'GET/POST/PUT/DELETE /produtos'
    },
    note: 'Sistema totalmente otimizado com cache e performance melhorada'
  });
});

// Inicializa o servidor
async function startServer() {
  console.log('üöÄ Iniciando servidor AutoReply com Produtos Din√¢micos (OTIMIZADO)...');
  console.log(`üîë ${API_KEYS.length} chaves API configuradas`);
  console.log(`ü§ñ Modelo: ${model}`);
  
  await initializeDatabase();
  
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    const currentDateTime = getCurrentDateTime();
    console.log(`üéâ Servidor rodando na porta ${PORT}`);
    console.log(`üåê Webhook: POST /webhook`);
    console.log(`üõçÔ∏è  Gerenciar produtos: GET/POST/PUT/DELETE /produtos`);
    console.log(`üóÉÔ∏è  MySQL: ${mysqlEnabled ? '‚úÖ CONECTADO' : '‚ùå DESCONECTADO'}`);
    console.log(`üîã Keep-alive MySQL: ‚úÖ ATIVO via rota /ping`);
    console.log(`üìÖ Data/Hora do servidor: ${currentDateTime.full}`);
    
    console.log('\nüéØ SISTEMA DE PRODUTOS DIN√ÇMICOS OTIMIZADO:');
    console.log(`   ‚úÖ Cache de produtos (30 segundos)`);
    console.log(`   ‚úÖ Queries SQL pr√©-compiladas`);
    console.log(`   ‚úÖ Rotacionamento inteligente de APIs`);
    console.log(`   ‚úÖ Formata√ß√£o de data/hora otimizada`);
    console.log(`   ‚úÖ Inicializa√ß√£o √∫nica do banco`);
    console.log(`   ‚úÖ Keep-alive inteligente MySQL`);
  });
}

startServer().catch(console.error);
